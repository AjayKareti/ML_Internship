# Importing libraries
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn import tree
from sklearn.tree import DecisionTreeClassifier

# Read Data
data = pd.read_csv("C:/CC/BCCP.csv")

# View the first five columns of dataframe
data.head(5)

# Replace non-numeric values with NaN
data["country"] = pd.to_numeric(data["country"], errors="coerce")
data["gender"] =pd.to_numeric(data["gender"],errors="coerce")

# Convert the data type of the column to float
data["country"] = data["country"].astype(float)
data["gender"] = data["gender"].astype(float)

# Split data into X and y
X = data.drop(['churn'], axis=1)
y = data['churn']

# Display the X and y data
X
y

# split the data into training and test datasets in ratio of 80:20
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Display the data after splitting individually
X_train
X_test
y_train
y_test

# Base Classifier
clf = DecisionTreeClassifier(random_state=42)
clf.fit(X_train, y_train)

# Make Predictions On Train Data
y_train_preds = clf.predict(X_train)
train_score = accuracy_score(y_train, y_train_preds)

# Make Predictions On Test Data
y_test_preds = clf.predict(X_test)
test_score = accuracy_score(y_test, y_test_preds)

print("Train Score:: %.3f"%train_score)
print("Test Score:: %.3f"%test_score)

# Classifier with depth = 4
clf = DecisionTreeClassifier(max_depth=4, random_state=42)
clf.fit(X_train, y_train)
# Make Predictions On Train Data
y_train_preds = clf.predict(X_train)
train_score = accuracy_score(y_train, y_train_preds)

#Make Predictions On Test Data
y_test_preds = clf.predict(X_test)
test_score = accuracy_score(y_test, y_test_preds)

print("Train Score:: %.3f" %train_score)
print("Test Score:: %.3f" %test_score)

# Decision Tree Classifier
clf = DecisionTreeClassifier(max_depth=7,
                             min_samples_split=20,
                             random_state=42)
clf.fit(X_train, y_train)

# Make Predictions On Train Data
y_train_preds = clf.predict(X_train)
train_score = accuracy_score(y_train, y_train_preds)

# On Test Data
y_test_preds = clf.predict(X_test)
test_score = accuracy_score(y_test, y_test_preds)

print("Train Score:: %.3f" %train_score)
print("Test Score:: %.3f" %test_score)

# Decision Tree Classifier
clf = DecisionTreeClassifier(max_depth=6,
                             min_samples_split=20, 
                             min_samples_leaf=12,
                             random_state=0)
clf.fit(X_train, y_train)

# Make Predictions On Train Data
y_train_preds = clf.predict(X_train)
train_score = accuracy_score(y_train, y_train_preds)

# On Test Data
y_test_preds = clf.predict(X_test)
test_score = accuracy_score(y_test, y_test_preds)

print("Train Score:: %.3f" %train_score)
print("Test Score:: %.3f" %test_score)

#feature selection
fimp = clf.feature_importances_
print(f"Feature Importance:\n{fimp}")
